name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            lib_name: libdeepseek.so
            artifact_name: deepseek-linux-x86_64.so
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            lib_name: deepseek.dll
            artifact_name: deepseek-windows-x86_64.dll
          - os: macos-latest
            target: x86_64-apple-darwin
            lib_name: libdeepseek.dylib
            artifact_name: deepseek-macos-x86_64.dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            lib_name: libdeepseek.dylib
            artifact_name: deepseek-macos-aarch64.dylib

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Build release binary
      shell: bash
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: runner.os != 'Windows'
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.lib_name }} ${{ matrix.artifact_name }}
        ls -la ${{ matrix.artifact_name }}

    - name: Prepare artifact (Windows)
      if: runner.os == 'Windows'
      run: |
        copy "target\${{ matrix.target }}\release\${{ matrix.lib_name }}" "${{ matrix.artifact_name }}"
        dir "${{ matrix.artifact_name }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Prepare release files
      run: |
        mkdir -p release_files
        find artifacts -name "*.so" -o -name "*.dll" -o -name "*.dylib" | while read file; do
          cp "$file" release_files/
        done
        ls -la release_files/

    - name: Get tag name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        release_name: Plugin ${{ steps.get_tag.outputs.tag }}
        body: |
          ## Plugin Release ${{ steps.get_tag.outputs.tag }}
          
          This release contains compiled dynamic libraries for multiple platforms:
          
          - **Linux (x86_64)**: `plugin-linux-x86_64.so`
          - **Windows (x86_64)**: `plugin-windows-x86_64.dll`  
          - **macOS (x86_64)**: `plugin-macos-x86_64.dylib`
          - **macOS (ARM64)**: `plugin-macos-aarch64.dylib`
          
          ### Installation
          1. Download the appropriate library for your platform
          2. Place it in your plugin directory
          3. Configure your API key in the plugin settings
          
          ### Changes
          - Built with Rust stable toolchain
          - Optimized release build
          - Cross-platform compatibility
        draft: false
        prerelease: false

    - name: Upload Linux Library
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release_files/plugin-linux-x86_64.so
        asset_name: plugin-linux-x86_64.so
        asset_content_type: application/octet-stream

    - name: Upload Windows Library
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release_files/plugin-windows-x86_64.dll
        asset_name: plugin-windows-x86_64.dll
        asset_content_type: application/octet-stream

    - name: Upload macOS x86_64 Library
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release_files/plugin-macos-x86_64.dylib
        asset_name: plugin-macos-x86_64.dylib
        asset_content_type: application/octet-stream

    - name: Upload macOS ARM64 Library
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release_files/plugin-macos-aarch64.dylib
        asset_name: plugin-macos-aarch64.dylib
        asset_content_type: application/octet-stream
